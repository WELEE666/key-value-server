
HashCache 实现了一种基于文件页的LRU Cache 功能，通过建立磁盘缓存的模式，实现了对磁盘文件的快速查找。
实现思想：
    写回策略：读写缓存共用，将数据写入到缓存，当数据被置换出cache时，将dirty数据同步到磁盘。（多次修改一次写回）；
    LRU 策略：由于cache的空间时一定的，且根据局部性原理，置换最久未被访问（get or put）的页面，将极大减少磁盘文件的访问，提高效率。
    散列：为了在cache中快速检索，将cache中的数据按散列表的形式组织，实现O(1)访问
缺点：
    存在一致性问题。
实现过程：
    1. 设定 Cache 包含 N 页，每页可以容纳 M 个数据节点，使每M个数据节点有对应的一页
    2. 设定 每个磁盘文件的大小为 M，即一页对应一个文件
    3. 对磁盘文件编号，使页和文件形成对应关系
    4. get(key) 操作，查找是否有关键字key对应的数据。
        4.1 在 cache 中查找，成功则结束查找；
        4.2 cache查找失败后，需要查找磁盘文件；按文件的创建日期由新到旧依次加载到cache中的page，每次加载后，都从cache中查找key,成功则结束查找
            如果在加载某个磁盘文件后查找失败，需要将该文件对应的page从cache中删除；
            如果在加载某个磁盘文件后查找成功，需要将该文件对应的page保留在cache中，并放到前列（标记为最近访问）；
            如果已加载完所有文件，仍然查找失败，结束查找，返回查找失败
        4.3 在多次的get操作查找成功后，cache中会保存很多page，直至cache中没有空闲的page，此时应该按需删除最久未被访问过的page
    5. put(key, value) 操作，向cache中添加该节点的信息，若已存在相同key则覆盖
        5.1 在cache中查找，如果查找成功，则覆盖节点value，设置该节点对应的页是dirty的
        5.2 cache 中查找失败，如get操作中在磁盘文件中查找，查找成功则保留该页在cache中，并覆盖修改key对应的value，同时标记该页为dirty
        5.3 磁盘文件也查找失败，需要新建一页（put_page）存储新的节点，put_page 和 其他 page 同样在LRU链表中移动。
            只是当 put_page 未写满M个数据，且没有因为存储其他数据而被弹出cache时，新的put(key, value)仍然写入到该put_page
            当一个 put_page 已经写满M或被弹出时，向cache重新申请一个put_page用于存储
